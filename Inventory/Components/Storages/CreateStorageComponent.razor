@using Entities
@using Business
@using FluentValidation
@using FluentValidation.Results
@inject IStorageBusiness _storageBusiness
@inject IProductBusiness _productBusiness
@inject IWarehouseBusiness _warehouseBusiness
@inject NavigationManager _navManager
@inject IValidator<StorageEntity> _storageValidator

<div>
    <EditForm Model="storage">
        <div class="form-group">
            <label class="form-label">Producto: </label>
            <InputSelect class="form-control" @bind-Value="storage.ProductId">
                @foreach (var product in products)
                {
                    <option value="@product.ProductId">@product.ProductName</option>
                }
            </InputSelect>
        </div>
        <div class="form-group">
            <label class="form-label">Bodega: </label>
            <InputSelect class="form-control" @bind-Value="storage.WarehouseId">
                @foreach (var warehouse in warehouses)
                {
                    <option value="@warehouse.WarehouseId">@warehouse.WarehouseName</option>
                }
            </InputSelect>
        </div>
        <br />
        <div class="form-group">
            <input type="button" value="Crear almacenamiento" @onclick="CreateStorage" />
        </div>
    </EditForm>
</div>

<ErrorsValidations errors="@errors" />

@code {
    StorageEntity storage = new StorageEntity()
    {
        StorageId = Guid.NewGuid(),
        LastUpdate = DateTime.Now,
        PartialQuantity = 0
    };

    List<ProductEntity> products = new List<ProductEntity>();
    List<WarehouseEntity> warehouses = new List<WarehouseEntity>();
    List<ValidationFailure> errors = new List<ValidationFailure>();

    protected override async Task OnInitializedAsync()
    {
        products = _productBusiness.ProductList();
        warehouses = _warehouseBusiness.WarehouseList();
    }

    private void CreateStorage()
    {
        ValidationResult validationResult = _storageValidator.Validate(storage);

        if (validationResult.IsValid)
        {
            if (!_storageBusiness.IsStorageExist(storage.ProductId, storage.WarehouseId))
            {
                _storageBusiness.CreateStorage(storage);
                _navManager.NavigateTo("storage/list");
            }
            else
            {
                errors.Clear();
                errors.Add( new ValidationFailure("", "El almacenamiento ya existe!"));
            }
        }
        else
        {
            errors = validationResult.Errors;
        }
    }
}

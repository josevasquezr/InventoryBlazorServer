@using Entities
@using Business
@using FluentValidation
@using FluentValidation.Results
@inject IValidator<CategoryEntity> _categoryValidator
@inject ICategoryBusiness _categoryBusiness
@inject NavigationManager _navManager

<div>
    <EditForm Model="category">
        <div class="form-group">
            <label class="form-label">Nombre: </label>
            <InputText class="form-control" @bind-Value="category.CategoryName" />
        </div>

        <br />

        <input type="button" value="Editar Categoria" @onclick="UpdateCategory"/>
    </EditForm>
</div>

<ErrorsValidations errors=@errors />

@code {
    [Parameter]
    public Guid id { get; set;  }

    CategoryEntity category = new CategoryEntity();
    List<ValidationFailure> errors = new List<ValidationFailure>();

    private void UpdateCategory()
    {
        ValidationResult validationResult = _categoryValidator.Validate(category);

        if(validationResult.IsValid)
        {
            _categoryBusiness.UpdateCategory(category);
            _navManager.NavigateTo("category/list");
        }
        else
        {
            errors = validationResult.Errors;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        category = _categoryBusiness.GetCategoryById(id);
    }
}
